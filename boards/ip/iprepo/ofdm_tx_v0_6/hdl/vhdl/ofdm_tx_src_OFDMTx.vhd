-- -------------------------------------------------------------
-- 
-- File Name: C:\Git\rfsoc_ofdm_workspace\models\hdl_prj\OFDM_tx\hdlsrc\OFDM_Tx_Rx_fixed_point\ofdm_tx_src_OFDMTx.vhd
-- Created: 2021-02-02 15:48:52
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.60417e-09
-- Target subsystem base rate: 8.33333e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        8.33333e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m_axis_tdata                  ce_out        8.33333e-08
-- m_axis_tvalid                 ce_out        8.33333e-08
-- m_axis_sym_tdata              ce_out        8.33333e-08
-- m_axis_sym_tvalid             ce_out        8.33333e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ofdm_tx_src_OFDMTx
-- Source Path: OFDM_Tx_Rx_fixed_point/OFDMTx
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ofdm_tx_src_OFDMTx_pkg.ALL;

ENTITY ofdm_tx_src_OFDMTx IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        modScheme                         :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        enable                            :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        m_axis_tdata                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        m_axis_tvalid                     :   OUT   std_logic;
        m_axis_sym_tdata                  :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        m_axis_sym_tvalid                 :   OUT   std_logic
        );
END ofdm_tx_src_OFDMTx;


ARCHITECTURE rtl OF ofdm_tx_src_OFDMTx IS

  -- Component Declarations
  COMPONENT ofdm_tx_src_OFDMTx_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb_1_32_0                      :   OUT   std_logic;
          enb_1_32_1                      :   OUT   std_logic;
          enb_1_384_0                     :   OUT   std_logic;
          enb_1_384_1                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_ControlSignalGenerator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_384_0                     :   IN    std_logic;
          enable                          :   IN    std_logic;
          dataValid                       :   OUT   std_logic;
          preambleValid                   :   OUT   std_logic;
          dataReady                       :   OUT   std_logic;
          PilotValid                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_DataGenerator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_384_0                     :   IN    std_logic;
          enb_1_32_0                      :   IN    std_logic;
          enb_1_384_1                     :   IN    std_logic;
          modScheme                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          dataValid                       :   IN    std_logic;
          preambleValid                   :   IN    std_logic;
          dataReady                       :   IN    std_logic;
          pilotValid                      :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambValOut                    :   OUT   std_logic;
          dataValidOut                    :   OUT   std_logic;
          symValidOut                     :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_SCMapper
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_384_0                     :   IN    std_logic;
          enb_1_32_0                      :   IN    std_logic;
          enb_1_384_1                     :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambValid                     :   IN    std_logic;
          dataValid                       :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambValidOut                  :   OUT   std_logic;
          dataValidOut                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_IFFT
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_384_0                     :   IN    std_logic;
          enb_1_32_0                      :   IN    std_logic;
          enb_1_384_1                     :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambleValidIn                 :   IN    std_logic;
          dataValidIn                     :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambValidOut                  :   OUT   std_logic;
          dataValidOut                    :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT ofdm_tx_src_CPAdd
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_384_0                     :   IN    std_logic;
          enb_1_32_0                      :   IN    std_logic;
          enb_1_384_1                     :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          preambValid                     :   IN    std_logic;
          dataValid                       :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
          dataOut_im                      :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En14
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ofdm_tx_src_OFDMTx_tc
    USE ENTITY work.ofdm_tx_src_OFDMTx_tc(rtl);

  FOR ALL : ofdm_tx_src_ControlSignalGenerator
    USE ENTITY work.ofdm_tx_src_ControlSignalGenerator(rtl);

  FOR ALL : ofdm_tx_src_DataGenerator
    USE ENTITY work.ofdm_tx_src_DataGenerator(rtl);

  FOR ALL : ofdm_tx_src_SCMapper
    USE ENTITY work.ofdm_tx_src_SCMapper(rtl);

  FOR ALL : ofdm_tx_src_IFFT
    USE ENTITY work.ofdm_tx_src_IFFT(rtl);

  FOR ALL : ofdm_tx_src_CPAdd
    USE ENTITY work.ofdm_tx_src_CPAdd(rtl);

  -- Signals
  SIGNAL enb_1_384_0                      : std_logic;
  SIGNAL enb_1_32_0                       : std_logic;
  SIGNAL enb_1_384_1                      : std_logic;
  SIGNAL enb_1_32_1                       : std_logic;
  SIGNAL modScheme_unsigned               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Downsample_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Downsample_out1_1                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Slice_out1                   : std_logic;  -- ufix1
  SIGNAL Data_Type_Conversion2_out1       : std_logic;
  SIGNAL Downsample1_out1                 : std_logic;
  SIGNAL Downsample1_out1_1               : std_logic;
  SIGNAL ControlSignalGenerator_out1      : std_logic;
  SIGNAL ControlSignalGenerator_out2      : std_logic;
  SIGNAL ControlSignalGenerator_out3      : std_logic;
  SIGNAL ControlSignalGenerator_out4      : std_logic;
  SIGNAL data_re                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL data_im                          : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL DataGenerator_out2               : std_logic;
  SIGNAL DataGenerator_out3               : std_logic;
  SIGNAL DataGenerator_out4               : std_logic;
  SIGNAL dataOut_re                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dataOut_im                       : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL SCMapper_out2                    : std_logic;
  SIGNAL SCMapper_out3                    : std_logic;
  SIGNAL IFFT_out1_re                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL IFFT_out1_im                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL IFFT_out2                        : std_logic;
  SIGNAL IFFT_out3                        : std_logic;
  SIGNAL dataOut_re_1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dataOut_im_1                     : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL dataOut_im_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion1_out1       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL dataOut_re_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion_out1        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bit_Concat_out1                  : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Concat_out1_wire1_bypass_reg : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Bit_Concat_out1_1                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Repeat_out1                      : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL HDL_Counter_out1                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Constant1_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Relational_Operator_relop1       : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 95);  -- ufix1 [96]
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL data_im_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion4_out1       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL data_re_signed                   : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Data_Type_Conversion3_out1       : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Bit_Concat1_out1                 : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Concat1_out1_wire1_bypass_reg : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL Bit_Concat1_out1_1               : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Repeat1_out1                     : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL delayMatch1_reg                  : vector_of_unsigned32(0 TO 59);  -- ufix32 [60]
  SIGNAL Repeat1_out1_1                   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Upsample_zero                    : std_logic;
  SIGNAL Upsample_muxout                  : std_logic;
  SIGNAL Upsample_bypass_reg              : std_logic;  -- ufix1
  SIGNAL Upsample_bypassout               : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 59);  -- ufix1 [60]
  SIGNAL Upsample_out1                    : std_logic;

BEGIN
  -- Generate random integers, M-QAM symbol mapping and sub-carrier 
  -- mapping. 
  -- 
  -- Add Cyclic Prefix 
  -- 
  -- Create OFDM symbols using 
  -- IFFT

  u_OFDMTx_tc : ofdm_tx_src_OFDMTx_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb_1_32_0 => enb_1_32_0,
              enb_1_32_1 => enb_1_32_1,
              enb_1_384_0 => enb_1_384_0,
              enb_1_384_1 => enb_1_384_1
              );

  u_ControlSignalGenerator : ofdm_tx_src_ControlSignalGenerator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_384_0 => enb_1_384_0,
              enable => Downsample1_out1_1,
              dataValid => ControlSignalGenerator_out1,
              preambleValid => ControlSignalGenerator_out2,
              dataReady => ControlSignalGenerator_out3,
              PilotValid => ControlSignalGenerator_out4
              );

  u_DataGenerator : ofdm_tx_src_DataGenerator
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_384_0 => enb_1_384_0,
              enb_1_32_0 => enb_1_32_0,
              enb_1_384_1 => enb_1_384_1,
              modScheme => std_logic_vector(Downsample_out1_1),  -- uint32
              dataValid => ControlSignalGenerator_out1,
              preambleValid => ControlSignalGenerator_out2,
              dataReady => ControlSignalGenerator_out3,
              pilotValid => ControlSignalGenerator_out4,
              dataOut_re => data_re,  -- sfix16_En14
              dataOut_im => data_im,  -- sfix16_En14
              preambValOut => DataGenerator_out2,
              dataValidOut => DataGenerator_out3,
              symValidOut => DataGenerator_out4
              );

  u_SCMapper : ofdm_tx_src_SCMapper
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_384_0 => enb_1_384_0,
              enb_1_32_0 => enb_1_32_0,
              enb_1_384_1 => enb_1_384_1,
              dataIn_re => data_re,  -- sfix16_En14
              dataIn_im => data_im,  -- sfix16_En14
              preambValid => DataGenerator_out2,
              dataValid => DataGenerator_out3,
              dataOut_re => dataOut_re,  -- sfix16_En14
              dataOut_im => dataOut_im,  -- sfix16_En14
              preambValidOut => SCMapper_out2,
              dataValidOut => SCMapper_out3
              );

  u_IFFT : ofdm_tx_src_IFFT
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_384_0 => enb_1_384_0,
              enb_1_32_0 => enb_1_32_0,
              enb_1_384_1 => enb_1_384_1,
              dataIn_re => dataOut_re,  -- sfix16_En14
              dataIn_im => dataOut_im,  -- sfix16_En14
              preambleValidIn => SCMapper_out2,
              dataValidIn => SCMapper_out3,
              dataOut_re => IFFT_out1_re,  -- sfix16_En14
              dataOut_im => IFFT_out1_im,  -- sfix16_En14
              preambValidOut => IFFT_out2,
              dataValidOut => IFFT_out3
              );

  u_CPAdd : ofdm_tx_src_CPAdd
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_384_0 => enb_1_384_0,
              enb_1_32_0 => enb_1_32_0,
              enb_1_384_1 => enb_1_384_1,
              dataIn_re => IFFT_out1_re,  -- sfix16_En14
              dataIn_im => IFFT_out1_im,  -- sfix16_En14
              preambValid => IFFT_out2,
              dataValid => IFFT_out3,
              dataOut_re => dataOut_re_1,  -- sfix16_En14
              dataOut_im => dataOut_im_1  -- sfix16_En14
              );

  modScheme_unsigned <= unsigned(modScheme);

  -- Downsample by 12 register (Sample offset 0)
  Downsample_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample_out1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_384_1 = '1' THEN
        Downsample_out1 <= modScheme_unsigned;
      END IF;
    END IF;
  END PROCESS Downsample_output_process;


  PipelineRegister_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample_out1_1 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_384_0 = '1' THEN
        Downsample_out1_1 <= Downsample_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister_process;


  Bit_Slice_out1 <= enable;

  
  Data_Type_Conversion2_out1 <= '1' WHEN Bit_Slice_out1 /= '0' ELSE
      '0';

  -- Downsample by 12 register (Sample offset 0)
  Downsample1_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_384_1 = '1' THEN
        Downsample1_out1 <= Data_Type_Conversion2_out1;
      END IF;
    END IF;
  END PROCESS Downsample1_output_process;


  PipelineRegister1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample1_out1_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_384_0 = '1' THEN
        Downsample1_out1_1 <= Downsample1_out1;
      END IF;
    END IF;
  END PROCESS PipelineRegister1_process;


  dataOut_im_signed <= signed(dataOut_im_1);

  Data_Type_Conversion1_out1 <= unsigned(dataOut_im_signed);

  dataOut_re_signed <= signed(dataOut_re_1);

  Data_Type_Conversion_out1 <= unsigned(dataOut_re_signed);

  Bit_Concat_out1 <= Data_Type_Conversion1_out1 & Data_Type_Conversion_out1;

  Bit_Concat_out1_wire1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Bit_Concat_out1_wire1_bypass_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_384_1 = '1' THEN
        Bit_Concat_out1_wire1_bypass_reg <= Bit_Concat_out1;
      END IF;
    END IF;
  END PROCESS Bit_Concat_out1_wire1_bypass_process;

  
  Bit_Concat_out1_1 <= Bit_Concat_out1 WHEN enb_1_384_1 = '1' ELSE
      Bit_Concat_out1_wire1_bypass_reg;

  Repeat_out1 <= Bit_Concat_out1_1;

  m_axis_tdata <= std_logic_vector(Repeat_out1);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 11
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_0 = '1' THEN
        IF HDL_Counter_out1 >= to_unsigned(16#B#, 4) THEN 
          HDL_Counter_out1 <= to_unsigned(16#0#, 4);
        ELSE 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#1#, 4);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Constant1_out1 <= to_unsigned(16#000B#, 16);

  
  Relational_Operator_relop1 <= '1' WHEN resize(HDL_Counter_out1, 16) = Constant1_out1 ELSE
      '0';

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_0 = '1' THEN
        delayMatch_reg(0) <= Relational_Operator_relop1;
        delayMatch_reg(1 TO 95) <= delayMatch_reg(0 TO 94);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Relational_Operator_out1 <= delayMatch_reg(95);

  data_im_signed <= signed(data_im);

  Data_Type_Conversion4_out1 <= unsigned(data_im_signed);

  data_re_signed <= signed(data_re);

  Data_Type_Conversion3_out1 <= unsigned(data_re_signed);

  Bit_Concat1_out1 <= Data_Type_Conversion4_out1 & Data_Type_Conversion3_out1;

  Bit_Concat1_out1_wire1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Bit_Concat1_out1_wire1_bypass_reg <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_384_1 = '1' THEN
        Bit_Concat1_out1_wire1_bypass_reg <= Bit_Concat1_out1;
      END IF;
    END IF;
  END PROCESS Bit_Concat1_out1_wire1_bypass_process;

  
  Bit_Concat1_out1_1 <= Bit_Concat1_out1 WHEN enb_1_384_1 = '1' ELSE
      Bit_Concat1_out1_wire1_bypass_reg;

  Repeat1_out1 <= Bit_Concat1_out1_1;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg <= (OTHERS => to_unsigned(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_0 = '1' THEN
        delayMatch1_reg(0) <= Repeat1_out1;
        delayMatch1_reg(1 TO 59) <= delayMatch1_reg(0 TO 58);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Repeat1_out1_1 <= delayMatch1_reg(59);

  m_axis_sym_tdata <= std_logic_vector(Repeat1_out1_1);

  -- Upsample: Upsample by 12, Sample offset 0 
  Upsample_zero <= '0';

  
  Upsample_muxout <= DataGenerator_out4 WHEN enb_1_384_1 = '1' ELSE
      Upsample_zero;

  -- Upsample bypass register
  Upsample_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Upsample_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_1 = '1' THEN
        Upsample_bypass_reg <= Upsample_muxout;
      END IF;
    END IF;
  END PROCESS Upsample_bypass_process;

  
  Upsample_bypassout <= Upsample_muxout WHEN enb_1_32_1 = '1' ELSE
      Upsample_bypass_reg;

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_0 = '1' THEN
        delayMatch2_reg(0) <= Upsample_bypassout;
        delayMatch2_reg(1 TO 59) <= delayMatch2_reg(0 TO 58);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Upsample_out1 <= delayMatch2_reg(59);

  ce_out <= enb_1_32_1;

  m_axis_tvalid <= Relational_Operator_out1;

  m_axis_sym_tvalid <= Upsample_out1;

END rtl;


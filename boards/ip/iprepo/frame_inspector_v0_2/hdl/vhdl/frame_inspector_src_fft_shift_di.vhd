-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\frame_inspector_test\frame_inspector_src_fft_shift_di.vhd
-- Created: 2021-02-26 00:11:04
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 8.33333e-08
-- Target subsystem base rate: 8.33333e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        8.33333e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m_axis_tdata                  ce_out        8.33333e-08
-- m_axis_tvalid                 ce_out        8.33333e-08
-- m_axis_tlast                  ce_out        8.33333e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: frame_inspector_src_fft_shift_di
-- Source Path: frame_inspector_test/fft_shift_di
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY frame_inspector_src_fft_shift_di IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        s_axis_tdata                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        s_axis_tvalid                     :   IN    std_logic;
        m_axis_tready                     :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        m_axis_tdata                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        m_axis_tvalid                     :   OUT   std_logic;
        m_axis_tlast                      :   OUT   std_logic
        );
END frame_inspector_src_fft_shift_di;


ARCHITECTURE rtl OF frame_inspector_src_fft_shift_di IS

  -- Component Declarations
  COMPONENT frame_inspector_src_control
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dma_tready                      :   IN    std_logic;
          sof                             :   IN    std_logic;
          tvalid                          :   IN    std_logic;
          frame_size                      :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          addr                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- int16
          wr_en                           :   OUT   std_logic;
          out_tvalid                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT frame_inspector_src_SinglePortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          addr                            :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          we                              :   IN    std_logic;
          dout                            :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : frame_inspector_src_control
    USE ENTITY work.frame_inspector_src_control(rtl);

  FOR ALL : frame_inspector_src_SinglePortRAM_generic
    USE ENTITY work.frame_inspector_src_SinglePortRAM_generic(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Constant_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Equal2_relop1                    : std_logic;
  SIGNAL Constant1_out1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL addr                             : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL wr_en                            : std_logic;
  SIGNAL out_tvalid                       : std_logic;
  SIGNAL addr_signed                      : signed(15 DOWNTO 0);  -- int16
  SIGNAL Data_Type_Conversion_out1        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Single_Port_RAM_System_out1      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Equal1_relop1                    : std_logic;
  SIGNAL Delay1_out1                      : std_logic;
  SIGNAL AND_out1                         : std_logic;

BEGIN
  u_control : frame_inspector_src_control
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              dma_tready => m_axis_tready,
              sof => Equal2_relop1,
              tvalid => s_axis_tvalid,
              frame_size => std_logic_vector(Constant1_out1),  -- uint16
              addr => addr,  -- int16
              wr_en => wr_en,
              out_tvalid => out_tvalid
              );

  u_Single_Port_RAM_System : frame_inspector_src_SinglePortRAM_generic
    GENERIC MAP( AddrWidth => 16,
                 DataWidth => 32
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              din => s_axis_tdata,
              addr => std_logic_vector(Data_Type_Conversion_out1),
              we => wr_en,
              dout => Single_Port_RAM_System_out1
              );

  enb <= clk_enable;

  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND s_axis_tvalid = '1' THEN
        HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#001#, 12);
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Constant_out1 <= to_unsigned(16#0000#, 16);

  
  Equal2_relop1 <= '1' WHEN resize(HDL_Counter_out1, 16) = Constant_out1 ELSE
      '0';

  Constant1_out1 <= to_unsigned(16#0FFF#, 16);

  addr_signed <= signed(addr);

  Data_Type_Conversion_out1 <= unsigned(addr_signed);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= out_tvalid;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Equal1_relop1 <= '1' WHEN Data_Type_Conversion_out1 = Constant1_out1 ELSE
      '0';

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Equal1_relop1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  AND_out1 <= Delay_out1 AND Delay1_out1;

  ce_out <= clk_enable;

  m_axis_tdata <= Single_Port_RAM_System_out1;

  m_axis_tvalid <= Delay_out1;

  m_axis_tlast <= AND_out1;

END rtl;

